spring.application.name=checkout-service
server.port=8082
spring.cloud.config.discovery.enabled=true
spring.cloud.config.discovery.serviceId=config-service
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/dh

# Añade esto a tu checkout-service properties
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
eureka.client.fetch-registry=true
eureka.client.register-with-eureka=true
eureka.instance.prefer-ip-address=true

spring.cloud.config.enabled=false

#circuit braker relacionado con actuator

#dice .product ya que se comunicara con el ms de products


# NO le damos el poder de modificar el estado de un ms a circuit breaker en caso que un ms este caido
# el mismo se encargara de que el estado del ms en actuator  (que inicia en UP) cambie
resilience4j.circuitbreaker.instances.product.allowHealthIndicatorToFail= false

# nos permite agregar informacion del circuit breaker en el endpoint de actuator
resilience4j.circuitbreaker.instances.product.registerHealthIndicator=true

# CONFIGURACION PROPIA DEL CIRCUIT BREAKER

# LE DECIMOS QUE PARA ANALIZAR LOS MS DEBEMOS ESPERAR EVENTOS
resilience4j.circuitbreaker.instances.product.slidingWindowType=COUNT_BASED

#DESPUES DE  SOLICITUDES QUE EL PRODUCT SERVICE NO NOS CONTESTE ANALIZA
resilience4j.circuitbreaker.instances.product.slidingWindowSize=52

#¿ que porcentaje de falla le vamos a permitir al product service para no hacer un cambio de estado?
# con cambio de estado me refiero al circuit breaker - si esta abierto, cerrado, semi abierto, etc
resilience4j.circuitbreaker.instances.product.failureRateThreshold=50


# CONFIGURACION para cuando el CIRCUIT BREAKER esta abierto o semi abierto

# ¿ cuanto tiempo esperamos para pasar de abierto a semi abierto?
resilience4j.circuitbreaker.instances.product.waitDurationInOpenState = 5000

# Permitir una automatica transicion entre estado abierto a semi
# abierto (esto va de la mano con el tiempo que
# pusimos aca arriba)
resilience4j.circuitbreaker.instances.product.automaticTransitionFromOpenToHalfOpenEnabled= true
resilience4j.circuitbreaker.instances.product.permittedNumberOfCallsInHalfOpenState= 3


#mecanismos de reintentos

#Configuración de reintentos
#resilience4j.retry.instances.product.maxAttempts=5
# resilience4j.retry.instances.product.waitDuration=200ms

#Para manejar cualquier tipo de excepción
#resilience4j.retry.instances.product.retryExceptions[0]=java.lang.Exception
# resilience4j.retry.instances.product.retryExceptions[1]=feign.FeignException